# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy the environement
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
             aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
             aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
                 cd backend
                 npm install
                 npm run build
                 npm run migrations:revert


jobs:
  build-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: front-end test
         command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: back-end test
            command: |
              cd backend
              npm install
              npm run test
              
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: front-end scanning
         command: |
           cd frontend
           npm install
           npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: back-end scanning
         command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople   
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker: 
      - image : python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:e1:8f:cf:d6:b5:3a:72:95:af:04:fa:00:e2:60:44"] 
      - run:
          name: Install AWS CLI
          command: |
             apk --no-cache add py-pip
             pip install awscli    
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible openssh
      - attach_workspace:
          at: ~/       
      - run:
          name: cat inventory file2
          command: |
              cat ~/project/.circleci/ansible/inventory.txt                  
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            export RECORD_HOST_KEYS=False
            export ANSIBLE_PARAMIKO_BANNER_TIMEOUT=30   
            echo ENVIROMENT=production > "backend/.env"      
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"          
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"      
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"            
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"      
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"     
            echo "CONTENT OF backend/.env"      
            cat backend/.env         
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml 
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend   
      - destroy-environment    

  run-migrations:
     docker:
      - image: circleci/node:13.8.0
     steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/    
      - run:
          name: Run migrations
          command: |
             cd backend
             cat .env
             npm install 
             npm run migrations > migrations_dump.txt
      - run: 
          name: cat migration
          command: |
              cat  ~/project/backend/migrations_dump.txt   
      - run:
          name: Send migration status to kvdb.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              curl --insecure https://kvdb.io/Sw2exr5x8aEpTwMN6pxf7q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi  
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend/inventory.txt
            - project/backend/migrations_dump.txt     

      - destroy-environment 
      - revert-migrations    
        
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs 

      - restore_cache:
          keys: [frontend-build]
      - run:   
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API URL = http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env     
      - run:
          name: Deploy frontend objects
          command: |
                cd frontend
                npm install 
                npm run build
                tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
      - revert-migrations 

  deploy-backend:
    docker:
      - image : python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:e1:8f:cf:d6:b5:3a:72:95:af:04:fa:00:e2:60:44"]
      - run:
          name: Install AWS CLI
          command: |
             apk --no-cache add py-pip
             pip install awscli    
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible nodejs npm curl openssh

      - restore_cache:
          keys: [backend-build]             
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies pm2
          command: |
             npm install pm2 -g
      - run:
          name: Deploy backend
          command: |
             cd backend
             npm install 
             npm run build
             cd ..
             tar -C backend -czvf artifact.tar.gz .
             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
             mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
             cd .circleci/ansible
             echo "Contents  of the inventory.txt file is -------"
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml      
      - destroy-environment 
      - revert-migrations 
      # Here's where you will add some code to rollback on failure         
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout 
      - run:
          name: Install AWS CLI
          command: |
             apk --no-cache add py-pip
             pip install awscli    
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl ansible nodejs npm 
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
             then
              return 0
             else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
               return 0
              else
               return 1
              fi
      - destroy-environment 
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Update cloudfront distribution
          command: |
             export OldWorkflowID=$(aws cloudformation \
             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)
             echo OldWorkflowID: "${OldWorkflowID}"

             aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name InitialStack \
             --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
             --tags project=udapeople
      - destroy-environment 
      - revert-migrations  

  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
             apk --no-cache add py-pip
             pip install awscli    
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl ansible nodejs npm         
      - run:       
          name: Get old stack workflow id and remove the old stack
          command: |
             export OldWorkflowID="udapeople-6657438"

             echo OldWorkflowID: "${OldWorkflowID}"

             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

             if [[ "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
             then
               aws s3 rm "s3://${OldWorkflowID}" --recursive
               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
             fi
      - destroy-environment 
      - revert-migrations      

  add-prometheus-node-exporter:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:e1:8f:cf:d6:b5:3a:72:95:af:04:fa:00:e2:60:44"] 
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible nodejs npm curl openssh

      - run:
          name: Install AWS CLI
          command: |
             apk --no-cache add py-pip
             pip install awscli    

      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt       
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Prometheus Node Exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt node_exporter.yml           


workflows:
  
  UdaPeopleCIWorkflow:

    jobs:
      - build-frontend
    #      filters:
    #        branches:
    #          only: [ dev-branch ]
      - build-backend 
    #      filters:
    #        branches:
    #          only: [ dev-branch ]
      - test-frontend:
         requires: [build-frontend]
    #     filters:
    #        branches:
    #          only: [ dev-branch ]
      - test-backend:
          requires: [build-backend]
    #      filters:
    #        branches:
    #          only: [ dev-branch ]
      - scan-backend:
          requires: [build-backend]
    #      filters:
    #        branches:
    #          only: [ dev-branch ]
      - scan-frontend:
          requires: [build-frontend]
    #      filters:
    #        branches:
    #          only: [ dev-branch ]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
    #      filters:
    #        branches:
    #          only: [ master ]
      - configure-infrastructure:
           requires: [deploy-infrastructure]    
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]   
      - add-prometheus-node-exporter:
          requires: [cleanup] 
