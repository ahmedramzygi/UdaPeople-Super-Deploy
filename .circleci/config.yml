version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            sudo npm install webpack-dev-server -g
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
              cd frontend
              npm i
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
              cd backend
              npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
              cd frontend
              npm audit --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
              cd backend
              npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" > ~/output.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
            cat ~/output.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - output.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["29:46:04:9c:65:1e:1c:d1:0e:8a:65:0a:c1:7c:f1:11"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed
      - run: 
          name: Configure server
          command: |
            pwd
            cat .circleci/ansible/inventory.txt

            echo ENVIRONMENT=production > "backend/.env"
            ls
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"

            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            cat backend/.env
            ls backend
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations     
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["29:46:04:9c:65:1e:1c:d1:0e:8a:65:0a:c1:7c:f1:11"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update ansible zip
            apk add --update openssh-client tar gzip
            pip install awscli

      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            ls
            cd ../
            cd backend/ && tar -zcvf ../backend.tar.gz . && cd - 

            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/

      - run:
          name: Deploy backend Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            # ls ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations 


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            cat ~/output.txt
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
      - run:
          name: Backend smoke test.
          command: |
            # curl -s $API_URL/api/status
            # cat $API_URL/api/status
            if curl -s $API_URL/api/status
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID}.s3-website.us-west-2.amazonaws.com/ | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations  


  cloudfront-update:
    docker:
      - image: amazon/aws-cli # python:3.7-alpine3.11
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="prod-${CIRCLE_WORKFLOW_ID}" \
              --stack-name udapeople-prod-cloudfront

            if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
              echo "Removing previous stack"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations    

  cleanup:
      docker:
        - image: cimg/base:2020.01
      steps:
        - checkout
        - aws-cli/setup
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

              echo "Old Workflow ID: ${OldWorkflowID}"
              if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
  
  # prometheus-node-exporter:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - add_ssh_keys:
  #         fingerprints: ["29:46:04:9c:65:1e:1c:d1:0e:8a:65:0a:c1:7c:f1:11"]
  #     - attach_workspace:
  #         at: ~/
  #     - run: 
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl nodejs npm
  #           apk add --update ansible zip
  #           apk add --update openssh-client tar gzip
  #           pip install awscli
  #     - run:
  #         name: Deploy backend Setup EC2 instance & copy compiled backend to the EC2 instance
  #         command: |
  #           cd ~/project/backend
  #           ansible-galaxy install weareinteractive.environment
  #           cat ~/project/.circleci/ansible/inventory.txt
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure_node_exporter.yml
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #     - revert-migrations 
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      - scan-frontend:
         requires: [build-frontend]
      - deploy-infrastructure:
         requires: [build-frontend, build-backend] #[test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations, deploy-backend]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - prometheus-node-exporter:
          requires: [cloudfront-update]
      - cleanup:
          requires: [cloudfront-update]
